You are a Fivetran Connector SDK expert. Your goal is to create a production-ready connector with minimal code that will work perfectly on the first attempt.  Follow the instructions/guidelines below using the API spec given.

Generate these files in this exact order:
1. connector.py – Main implementation with schema() and update() functions  
2. configuration.json – Configuration specifications  
3. requirements.txt – Python dependencies

Focus on creating a connector that:
1. Only defines tables and primary keys in the schema() function as noted in the referenced API spec, letting Fivetran infer all column types automatically.
2. Uses the primary key in the description for one of the properties in the API spec, never guessing what the primary key is; ensure you scan the spec for the primary key.
3. Never specifies column definitions or data types in the schema function.
4. Uses proper Fivetran checkpoint operations on the cursor value.
5. Handles configuration safely using .get() with defaults where applicable.  The only configuration values stored in the configuration JSON are those used by the API spec, and these values should just be key pair with no other metadata.  The base URL for the API should be in the configuration JSON as well.
6. Includes appropriate error handling and logging.
7. Ensure the 200 response is checked for the dataset name to replace the my_records references in the example.

Python Packages
Only list the packages required in the requirements.txt file.  Do not list "fivetran_connector_sdk" or "requests" as these packages are pre-installed.

API-Specific Validations
1. Authentication - Follow API documentation (header, query parameter, etc.)
2. Pagination - Use next_cursor or equivalent from response along with has_more to signal when another call is needed
3. Rate Limiting - Use retry/backoff mechanisms if needed.  Do not allow more than 200 iterations. If 200 is hit, save the checkpoint again and exit with a friendly message.
4. Error Handling - Catch and log API-specific error codes

Working example:
import requests
import time
import json
from fivetran_connector_sdk import Connector
from fivetran_connector_sdk import Operations as op
from fivetran_connector_sdk import Logging as log

def schema(configuration: dict):
    """Define the minimal table schema for Fivetran"""
    # Validate configuration
    api_key = configuration.get('api_key')
    if not api_key:
        log.severe("API key is missing from configuration")
        return []

    # Return minimal schema with ONLY table name and primary key
    return [
        {
            "table": "my_records",
            "primary_key": ["record_id"]
        }
        # Add additional tables as needed
    ]

Example update() Function

def update(configuration: dict, state: dict):
    """Extract data from the endpoint and yield operations"""
    
    # Validate configuration.
    api_key = configuration.get('api_key')
    if not api_key:
        log.severe("API key is missing from configuration")
        return
    
    base_url = configuration.get('base_url')
    if not base_url:
        log.severe("Base URL is missing from configuration")
        return
    
    page_size = int(configuration.get('page_size', '100'))
    
    # Add the x-api-key to the session headers.
    headers = {"x-api-key": api_key}
    session = requests.Session()
    session.headers.update(headers)
    
    # Retrieve the state for change data capture.
    next_cursor = state.get('next_cursor')
    
    # Set up the parameters for the API request.
    url = f"{base_url}/my_data"
    params = {"page_size": page_size}
    if next_cursor:
        params["cursor"] = next_cursor
        log.info(f"Starting sync from cursor: {next_cursor}")
    else:
        log.info("Starting initial sync")
    
    record_count = 0
    has_more = True    
    
    try:
        while has_more:
            try:
                # Make API request with retry logic
                for attempt in range(3):
                    try:
                        response = session.get(url, params=params)
                        response.raise_for_status()
                        break
                    except requests.exceptions.RequestException as e:
                        if attempt == 2:
                            raise
                        log.warning(f"Request failed (attempt {attempt + 1}/3): {str(e)}")
                        time.sleep(2 ** attempt)  # Exponential backoff
                
                data = response.json()
                
                # Process records.
                records = data.get("my_records", [])
                for record in records:
                    # Ensure the record has an ID
                    if 'record_id' in record:
                        yield op.upsert("my_records", record)
                        record_count += 1
                    else:
                        log.warning(f"Skipping record without ID: {record}")
                
                # Update pagination info
                next_cursor = data.get("next_cursor")
                has_more = data.get("has_more", False)

                # Checkpoint every pagination batch
                yield op.checkpoint({"next_cursor": next_cursor})
                log.info(f"Checkpoint at {record_count} records, cursor: {next_cursor}")
                
                if next_cursor:
                    params["cursor"] = next_cursor
                
                log.info(f"Processed batch: {len(records)} records, has_more: {has_more}")
                
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 401:
                    log.severe("Authentication failed - check API key")
                    return
                elif e.response.status_code == 429:
                    log.warning("Rate limit hit, waiting 60 seconds")
                    time.sleep(60)
                    continue
                else:
                    log.severe(f"HTTP error: {e.response.status_code} - {e.response.text}")
                    break
            except requests.exceptions.RequestException as e:
                log.severe(f"API request failed: {str(e)}")
                break
            except Exception as e:
                log.severe(f"Unexpected error processing response: {str(e)}")
                break
        
        # Final checkpoint
        if next_cursor:
            yield op.checkpoint({"next_cursor": next_cursor})
            log.info(f"Final checkpoint: {record_count} total records, cursor: {next_cursor}")
        else:
            log.info(f"Sync completed: {record_count} total records")
    
    except Exception as e:
        log.severe(f"Unexpected error in update function: {str(e)}")

# This creates the connector object that will use the update function defined in this connector.py file.
connector = Connector(update=update, schema=schema)

# Check if the script is being run as the main module.
# This is Python's standard entry method allowing your script to be run directly from the command line or IDE 'run' button.
# This is useful for debugging while you write your code. Note this method is not called by Fivetran when executing your connector in production.
# Please test using the Fivetran debug command prior to finalizing and deploying your connector.
if __name__ == "main":
    # Open the configuration.json file and load its contents into a dictionary.
    with open("configuration.json", "r") as f:
        configuration = json.load(f)
    # Adding this code to your `connector.py` allows you to test your connector by running your file directly from your IDE.
    connector.debug(configuration=configuration)